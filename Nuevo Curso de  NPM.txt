2.
Historia

1995 Nacimiento de JS --> Uno de los lenguajes mas populares con miles de aplicaciones y grandes empresas apostando por este recurso

2009 Nace Node.js --> Un entorno en tiempo de ejecucion multiplataforma.

2009 NPM (Node Package Manager) --> Gestor de paquetes por defecto para Node.js

¿Qué son los gestores de dependencias?
Organizan, administran y tienen una serie de herramientas las cuales podemos aprovehar en nuestros proyectos y ser mucho mas agiles en la creación de nuestras aplicaciones.

Paquetes y modulos
Van a ser instalados y utlizados segun sea el caso. Podemos tener paquetes que funcionan solamente de lado de node asi como tambien de lado de la arquitectura web.

Herramientas que tenemos al instalar Node.js

Repositorio onlines --> Podemos publicar paquetes que sean mejoras y/o ayudas para la construccion de aplicaciones.

Command Line Client (CLI) --> Cliente que nos ayuda a trabajar de manera correcta con comandos

5.
“name”: “npm-init” —> Podemos ponerle un nombre sin embargo toma por defecto el de la carpeta.

“version”: “1.0.0” —> Podemos cambiar segun el caso, dependiendo un cambio mayor o uno menor

“description”:"" —> Podemos hacer una breve descripcion del proyecto.

“entry point”: “(index.js)” —> Punto de entrada del proyecto.

“test command”: —> Podemos incluir los comandos para validar nuestro codigo.

“git repository”: —> Podemos incluir el repositorio para mantenerlo en la nube

“keywords”: [“javascript”, “angular”, “node”] —> Que va a utilizar nuestro proyecto.

“author”: "Alexa Pulido<pulidoaleXXXXXXX> —> Persona que crea el proyecto

“license”: “MIT” —> Licencias, la mas utilizada es MIT, permite distribuir nuestro codigo.

6.


5.
“name”: “npm-init” —> Podemos ponerle un nombre sin embargo toma por defecto el de la carpeta.

“version”: “1.0.0” —> Podemos cambiar segun el caso, dependiendo un cambio mayor o uno menor

“description”:"" —> Podemos hacer una breve descripcion del proyecto.

“entry point”: “(index.js)” —> Punto de entrada del proyecto.

“test command”: —> Podemos incluir los comandos para validar nuestro codigo.

“git repository”: —> Podemos incluir el repositorio para mantenerlo en la nube

“keywords”: [“javascript”, “angular”, “node”] —> Que va a utilizar nuestro proyecto.

“author”: "Alexa Pulido<pulidoaleXXXXXXX> —> Persona que crea el proyecto

“license”: “MIT” —> Licencias, la mas utilizada es MIT, permite distribuir nuestro codigo.


6.
Dependencias

npm install moment

npm install eslint --save-dev —> dependencia que solo va a ser utilizada en el entorno de desarollo

npm install react --save —> dependencia para ser llevada a produccion.

Paquetes Globales

npm install -g
Ver lista de los paquetes

npm list
Ver lista de paquetes globlales

npm list -g

7.
npm install package-name -o → Instalar una dependencia opcional
Se pueden generar conflictos cuando se tienen paquetes que usan la misma dependencia pero en versiones diferentes. Para evitar esto se puede simular una instalación con npm install package-name —dry-run. Con esto se simula la instalación pero sin agregar ningún paquete, si no hay ningún conflicto se procede a instalar de la manera convencional.
npm install package-name@0.15.0 → Instalar la versión especifica de un paquete. Si luego se quiere instalar la versión más reciente se usa npm install package-name@latest.
npm install → Instala las dependencias que estén dentro de un package.json.

8.
